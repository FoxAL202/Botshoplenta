
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import json, os
from config import BOT_TOKEN, ADMIN_CHAT_ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

PRODUCTS_PATH = 'data/products.json'
MEDIA_DIR = 'media/'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
def load_products():
    with open(PRODUCTS_PATH, 'r', encoding='utf-8') as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
def save_products(products):
    with open(PRODUCTS_PATH, 'w', encoding='utf-8') as f:
        json.dump(products, f, ensure_ascii=False, indent=4)

PRODUCTS = load_products()

user_states = {}
user_orders = {}
admin_states = {}

def get_product_keyboard(index):
    keyboard = InlineKeyboardMarkup()
    buttons = []
    if index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav_{index - 1}"))
    if index < len(PRODUCTS) - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"nav_{index + 1}"))
    keyboard.row(*buttons)
    keyboard.add(InlineKeyboardButton("üõç –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{PRODUCTS[index]['id']}"))
    return keyboard

@dp.message_handler(commands=['start', 'menu'])
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –±—É–∫–µ—Ç–æ–≤", callback_data="menu_catalog"),
        InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="menu_about"),
        InlineKeyboardButton("‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ª–µ–Ω—Ç–æ—á–Ω—ã–π –±–æ—Ç*!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb, parse_mode="Markdown")
    user_states[message.from_user.id] = {"index": 0}
    await show_product(message.from_user.id, 0)

async def show_product(user_id, index):
    product = PRODUCTS[index]
    photo = types.InputFile(product["photo"])
    caption = f"<b>üéÄ {product['name']}</b>\n\nüìù {product['description']}"
    keyboard = get_product_keyboard(index)
    await bot.send_photo(user_id, photo, caption=caption, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data.startswith("nav_"))
async def navigate_catalog(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[1])
    user_states[callback.from_user.id]["index"] = index
    await show_product(callback.from_user.id, index)

@dp.callback_query_handler(lambda c: c.data.startswith("order_"))
async def start_order(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    user_orders[callback.from_user.id] = {"product_id": product_id}
    await bot.send_message(callback.from_user.id, "–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")

@dp.message_handler(lambda m: m.from_user.id in user_orders and 'quantity' not in user_orders[m.from_user.id])
async def get_quantity(message: types.Message):
    try:
        qty = int(message.text.strip())
        if qty < 1:
            raise ValueError
        user_orders[message.from_user.id]['quantity'] = qty
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")

@dp.message_handler(lambda m: m.from_user.id in user_orders and 'name' not in user_orders[m.from_user.id])
async def get_name(message: types.Message):
    user_orders[message.from_user.id]['name'] = message.text.strip()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(lambda m: m.from_user.id in user_orders and 'phone' not in user_orders[m.from_user.id])
async def get_phone(message: types.Message):
    phone = message.text.strip()
    if not phone.startswith('+') or not any(c.isdigit() for c in phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...")
        return
    user_orders[message.from_user.id]['phone'] = phone
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")
    )
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "skip_comment")
async def skip_comment(callback: types.CallbackQuery):
    user_orders[callback.from_user.id]['comment'] = "-"
    await finish_order(callback.from_user.id)

@dp.message_handler(lambda m: m.from_user.id in user_orders and 'comment' not in user_orders[m.from_user.id])
async def get_comment(message: types.Message):
    user_orders[message.from_user.id]['comment'] = message.text.strip()
    await finish_order(message.from_user.id)

async def finish_order(user_id):
    order = user_orders.pop(user_id)
    product = next((p for p in PRODUCTS if p["id"] == order["product_id"]), None)
    if product:
        msg = (
            f"<b>üåπ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
            f"–ò–º—è: {order['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}"
        )
        keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"confirm_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
    )
    await bot.send_message(ADMIN_CHAT_ID, msg, reply_markup=keyboard, parse_mode="HTML")
        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    else:
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        return
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—É–∫–µ—Ç", callback_data="admin_edit"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç", callback_data="admin_delete"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç", callback_data="admin_add"),
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤", callback_data="admin_list")
    )
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "admin_add")
async def admin_add(callback: types.CallbackQuery):
    admin_states[callback.from_user.id] = {"step": "photo"}
    await bot.send_message(callback.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def admin_photo(message: types.Message):
    state = admin_states.get(message.from_user.id)
    if not state or state.get("step") != "photo":
        return
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    photo_path = os.path.join(MEDIA_DIR, f"bouquet_{file.file_unique_id}.jpg")
    await photo.download(destination_file=photo_path)
    state["photo"] = photo_path
    state["step"] = "name"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")

@dp.message_handler(lambda m: m.from_user.id in admin_states and admin_states[m.from_user.id].get("step") == "name")
async def admin_name(message: types.Message):
    admin_states[message.from_user.id]["name"] = message.text.strip()
    admin_states[message.from_user.id]["step"] = "desc"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")

@dp.message_handler(lambda m: m.from_user.id in admin_states and admin_states[m.from_user.id].get("step") == "desc")
async def admin_desc(message: types.Message):
    state = admin_states.pop(message.from_user.id)
    new_product = {
        "id": max(p["id"] for p in PRODUCTS) + 1 if PRODUCTS else 1,
        "name": state["name"],
        "description": message.text.strip(),
        "photo": state["photo"]
    }
    PRODUCTS.append(new_product)
    save_products(PRODUCTS)
    await message.answer("–ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!")

@dp.callback_query_handler(lambda c: c.data == "admin_list")
async def admin_list(callback: types.CallbackQuery):
    text = "\n".join([f"{p['id']}: {p['name']}" for p in PRODUCTS])
    await bot.send_message(callback.from_user.id, f"–¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥:\n{text}")
    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–∞–∑
@dp.callback_query_handler(lambda c: c.data.startswith("confirm_") or c.data.startswith("reject_"))
async def handle_order_response(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    if callback.data.startswith("confirm_"):
        await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
        await callback.message.edit_reply_markup()
    elif callback.data.startswith("reject_"):
        await bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.")
        await callback.message.edit_reply_markup()

@dp.callback_query_handler(lambda c: c.data == "admin_delete")
async def admin_delete(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup()
    for p in PRODUCTS:
        kb.add(InlineKeyboardButton(f"{p['name']}", callback_data=f"del_{p['id']}"))
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("del_"))
async def confirm_delete(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = next((p for p in PRODUCTS if p["id"] == product_id), None)
    if not product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    PRODUCTS.remove(product)
    save_products(PRODUCTS)
    await callback.message.answer(f"–ë—É–∫–µ—Ç '{product['name']}' —É–¥–∞–ª—ë–Ω.")

@dp.callback_query_handler(lambda c: c.data == "admin_edit")
async def admin_edit(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup()
    for p in PRODUCTS:
        kb.add(InlineKeyboardButton(f"{p['name']}", callback_data=f"edit_{p['id']}"))
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("edit_"))
async def select_edit(callback: types.CallbackQuery):
    pid = int(callback.data.split("_")[1])
    admin_states[callback.from_user.id] = {"step": "edit_field", "edit_id": pid}
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
        InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_desc")
    )
    await bot.send_message(callback.from_user.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("edit_field_"))
async def choose_edit_field(callback: types.CallbackQuery):
    field = callback.data.split("_")[2]
    state = admin_states.get(callback.from_user.id, {})
    state["field"] = field
    state["step"] = "edit_input"
    await bot.send_message(callback.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")

@dp.message_handler(lambda m: m.from_user.id in admin_states and admin_states[m.from_user.id].get("step") == "edit_input")
async def update_edit_field(message: types.Message):
    state = admin_states.pop(message.from_user.id)
    pid = state["edit_id"]
    field = state["field"]
    product = next((p for p in PRODUCTS if p["id"] == pid), None)
    if product:
        product[field] = message.text.strip()
        save_products(PRODUCTS)
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data == "menu_catalog")
async def menu_catalog(callback: types.CallbackQuery):
    user_states[callback.from_user.id] = {"index": 0}
    await show_product(callback.from_user.id, 0)

@dp.callback_query_handler(lambda c: c.data == "menu_about")
async def menu_about(callback: types.CallbackQuery):
    text = "üå∏ *–û –Ω–∞—Å*:\n–ú—ã —Å–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–µ—Ç—ã –∏–∑ –∞—Ç–ª–∞—Å–Ω—ã—Ö –ª–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é —Å –ª—é–±–æ–≤—å—é.\n–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞, –¥–µ–∫–æ—Ä–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π."
    await callback.message.answer(text, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data == "menu_contacts")
async def menu_contacts(callback: types.CallbackQuery):
    text = "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\nInstagram: @ribbon.flowers\n–ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞"
    await callback.message.answer(text, parse_mode="Markdown")
